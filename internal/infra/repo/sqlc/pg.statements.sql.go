// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: pg.statements.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM books
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteBook, id)
	return err
}

const deleteIngredient = `-- name: DeleteIngredient :exec
DELETE FROM ingredients
WHERE id = $1
`

func (q *Queries) DeleteIngredient(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteIngredient, id)
	return err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM recipes
WHERE id = $1
`

func (q *Queries) DeleteRecipe(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteRecipe, id)
	return err
}

const deleteStep = `-- name: DeleteStep :exec
DELETE FROM steps
WHERE id = $1
`

func (q *Queries) DeleteStep(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStep, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const insertBook = `-- name: InsertBook :one
INSERT INTO books (id, name, description, owner_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, owner_id
`

type InsertBookParams struct {
	ID          pgtype.UUID
	Name        string
	Description string
	OwnerID     pgtype.UUID
}

func (q *Queries) InsertBook(ctx context.Context, arg InsertBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, insertBook,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.OwnerID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
	)
	return i, err
}

const insertIngredient = `-- name: InsertIngredient :one
INSERT INTO ingredients (id, name, description, recipe_id, qty, unit)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, description, recipe_id, qty, unit
`

type InsertIngredientParams struct {
	ID          pgtype.UUID
	Name        string
	Description string
	RecipeID    pgtype.UUID
	Qty         string
	Unit        string
}

func (q *Queries) InsertIngredient(ctx context.Context, arg InsertIngredientParams) (Ingredient, error) {
	row := q.db.QueryRow(ctx, insertIngredient,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.RecipeID,
		arg.Qty,
		arg.Unit,
	)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.RecipeID,
		&i.Qty,
		&i.Unit,
	)
	return i, err
}

const insertRecipe = `-- name: InsertRecipe :one
INSERT INTO recipes (id, name, description, book_id)
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, book_id
`

type InsertRecipeParams struct {
	ID          pgtype.UUID
	Name        string
	Description string
	BookID      pgtype.UUID
}

func (q *Queries) InsertRecipe(ctx context.Context, arg InsertRecipeParams) (Recipe, error) {
	row := q.db.QueryRow(ctx, insertRecipe,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.BookID,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.BookID,
	)
	return i, err
}

const insertStep = `-- name: InsertStep :one
INSERT INTO steps (id, name, description, recipe_id, duration)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, description, recipe_id, duration
`

type InsertStepParams struct {
	ID          pgtype.UUID
	Name        string
	Description string
	RecipeID    pgtype.UUID
	Duration    string
}

func (q *Queries) InsertStep(ctx context.Context, arg InsertStepParams) (Step, error) {
	row := q.db.QueryRow(ctx, insertStep,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.RecipeID,
		arg.Duration,
	)
	var i Step
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.RecipeID,
		&i.Duration,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (id, username, name, email, password)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, name, email, password
`

type InsertUserParams struct {
	ID       pgtype.UUID
	Username string
	Name     string
	Email    string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.ID,
		arg.Username,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const selectAllBooks = `-- name: SelectAllBooks :many
SELECT b.id, b.name, b.description, u.id, u.username, u.name, u.email, u.password
FROM books b
         JOIN users u ON b.owner_id = u.id
`

type SelectAllBooksRow struct {
	ID          pgtype.UUID
	Name        string
	Description string
	ID_2        pgtype.UUID
	Username    string
	Name_2      string
	Email       string
	Password    string
}

func (q *Queries) SelectAllBooks(ctx context.Context) ([]SelectAllBooksRow, error) {
	rows, err := q.db.Query(ctx, selectAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllBooksRow
	for rows.Next() {
		var i SelectAllBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ID_2,
			&i.Username,
			&i.Name_2,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectAllRecipes = `-- name: SelectAllRecipes :many
SELECT r.id, r.name, r.description, b.id, b.name, b.description, u.id, u.username, u.name, u.email, u.password
FROM recipes r
         JOIN books b ON r.book_id = b.id
         JOIN users u ON b.owner_id = u.id
`

type SelectAllRecipesRow struct {
	ID            pgtype.UUID
	Name          string
	Description   string
	ID_2          pgtype.UUID
	Name_2        string
	Description_2 string
	ID_3          pgtype.UUID
	Username      string
	Name_3        string
	Email         string
	Password      string
}

func (q *Queries) SelectAllRecipes(ctx context.Context) ([]SelectAllRecipesRow, error) {
	rows, err := q.db.Query(ctx, selectAllRecipes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllRecipesRow
	for rows.Next() {
		var i SelectAllRecipesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ID_2,
			&i.Name_2,
			&i.Description_2,
			&i.ID_3,
			&i.Username,
			&i.Name_3,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectAllUsers = `-- name: SelectAllUsers :many
SELECT id, username, name, email, password
FROM users
`

func (q *Queries) SelectAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, selectAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Name,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectBookByID = `-- name: SelectBookByID :one
SELECT b.id, b.name, b.description, u.id, u.username, u.name, u.email, u.password
FROM books b
         JOIN users u ON b.owner_id = u.id
WHERE b.id = $1
`

type SelectBookByIDRow struct {
	ID          pgtype.UUID
	Name        string
	Description string
	ID_2        pgtype.UUID
	Username    string
	Name_2      string
	Email       string
	Password    string
}

func (q *Queries) SelectBookByID(ctx context.Context, id pgtype.UUID) (SelectBookByIDRow, error) {
	row := q.db.QueryRow(ctx, selectBookByID, id)
	var i SelectBookByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ID_2,
		&i.Username,
		&i.Name_2,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const selectIngredientsByRecipeID = `-- name: SelectIngredientsByRecipeID :many
SELECT id, name, description, recipe_id, qty, unit
FROM ingredients
WHERE recipe_id = $1
`

func (q *Queries) SelectIngredientsByRecipeID(ctx context.Context, recipeID pgtype.UUID) ([]Ingredient, error) {
	rows, err := q.db.Query(ctx, selectIngredientsByRecipeID, recipeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ingredient
	for rows.Next() {
		var i Ingredient
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.RecipeID,
			&i.Qty,
			&i.Unit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectRecipeByID = `-- name: SelectRecipeByID :one
SELECT r.id, r.name, r.description, b.id, b.name, b.description, u.id, u.username, u.name, u.email, u.password
FROM recipes r
         JOIN books b ON r.book_id = b.id
         JOIN users u ON b.owner_id = u.id
WHERE r.id = $1
`

type SelectRecipeByIDRow struct {
	ID            pgtype.UUID
	Name          string
	Description   string
	ID_2          pgtype.UUID
	Name_2        string
	Description_2 string
	ID_3          pgtype.UUID
	Username      string
	Name_3        string
	Email         string
	Password      string
}

func (q *Queries) SelectRecipeByID(ctx context.Context, id pgtype.UUID) (SelectRecipeByIDRow, error) {
	row := q.db.QueryRow(ctx, selectRecipeByID, id)
	var i SelectRecipeByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ID_2,
		&i.Name_2,
		&i.Description_2,
		&i.ID_3,
		&i.Username,
		&i.Name_3,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const selectStepsByRecipeID = `-- name: SelectStepsByRecipeID :many
SELECT id, name, description, recipe_id, duration
FROM steps
WHERE recipe_id = $1
`

func (q *Queries) SelectStepsByRecipeID(ctx context.Context, recipeID pgtype.UUID) ([]Step, error) {
	rows, err := q.db.Query(ctx, selectStepsByRecipeID, recipeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Step
	for rows.Next() {
		var i Step
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.RecipeID,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUserByID = `-- name: SelectUserByID :one
SELECT id, username, name, email, password
FROM users
WHERE id = $1
`

func (q *Queries) SelectUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, selectUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET name = $2, description = $3, owner_id = $4
WHERE id = $1
RETURNING id, name, description, owner_id
`

type UpdateBookParams struct {
	ID          pgtype.UUID
	Name        string
	Description string
	OwnerID     pgtype.UUID
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBook,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.OwnerID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
	)
	return i, err
}

const updateIngredient = `-- name: UpdateIngredient :one
UPDATE ingredients
SET name = $2, description = $3, recipe_id = $4, qty = $5, unit = $5
WHERE id = $1
RETURNING id, name, description, recipe_id, qty, unit
`

type UpdateIngredientParams struct {
	ID          pgtype.UUID
	Name        string
	Description string
	RecipeID    pgtype.UUID
	Qty         string
}

func (q *Queries) UpdateIngredient(ctx context.Context, arg UpdateIngredientParams) (Ingredient, error) {
	row := q.db.QueryRow(ctx, updateIngredient,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.RecipeID,
		arg.Qty,
	)
	var i Ingredient
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.RecipeID,
		&i.Qty,
		&i.Unit,
	)
	return i, err
}

const updateRecipe = `-- name: UpdateRecipe :one
UPDATE recipes
SET name = $2, description = $3, book_id = $4
WHERE id = $1
RETURNING id, name, description, book_id
`

type UpdateRecipeParams struct {
	ID          pgtype.UUID
	Name        string
	Description string
	BookID      pgtype.UUID
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) (Recipe, error) {
	row := q.db.QueryRow(ctx, updateRecipe,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.BookID,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.BookID,
	)
	return i, err
}

const updateStep = `-- name: UpdateStep :one
UPDATE steps
SET name = $2, description = $3, recipe_id = $4, duration = $5
WHERE id = $1
RETURNING id, name, description, recipe_id, duration
`

type UpdateStepParams struct {
	ID          pgtype.UUID
	Name        string
	Description string
	RecipeID    pgtype.UUID
	Duration    string
}

func (q *Queries) UpdateStep(ctx context.Context, arg UpdateStepParams) (Step, error) {
	row := q.db.QueryRow(ctx, updateStep,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.RecipeID,
		arg.Duration,
	)
	var i Step
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.RecipeID,
		&i.Duration,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $1, name = $2, email = $3, password = $4
WHERE id = $1
RETURNING id, username, name, email, password
`

type UpdateUserParams struct {
	Username string
	Name     string
	Email    string
	Password string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}
