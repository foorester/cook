// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/port/repo.go

// Package pgx_test is a generated GoMock package.
package sqlc_test

import (
	context "context"
	reflect "reflect"

	model "github.com/foorester/cook/internal/domain/model"
	db "github.com/foorester/cook/internal/infra/db"
	gomock "github.com/golang/mock/gomock"
)

type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

type MockRepoMockRecorder struct {
	mock *MockRepo
}

func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

func (m *MockRepo) DB(ctx context.Context) db.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB", ctx)
	ret0, _ := ret[0].(db.DB)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockRepoMockRecorder) DB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockRepo)(nil).DB), ctx)
}

type MockCookRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCookRepoMockRecorder
}

// MockCookRepoMockRecorder is the mock recorder for MockCookRepo.
type MockCookRepoMockRecorder struct {
	mock *MockCookRepo
}

func NewMockCookRepo(ctrl *gomock.Controller) *MockCookRepo {
	mock := &MockCookRepo{ctrl: ctrl}
	mock.recorder = &MockCookRepoMockRecorder{mock}
	return mock
}

func (m *MockCookRepo) EXPECT() *MockCookRepoMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockCookRepo) CreateBook(ctx context.Context, recipe model.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, recipe)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockCookRepoMockRecorder) CreateBook(ctx, recipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockCookRepo)(nil).CreateBook), ctx, recipe)
}

func (m *MockCookRepo) CreateRecipe(ctx context.Context, recipe model.Recipe) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecipe", ctx, recipe)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockCookRepoMockRecorder) CreateRecipe(ctx, recipe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecipe", reflect.TypeOf((*MockCookRepo)(nil).CreateRecipe), ctx, recipe)
}

func (m *MockCookRepo) DB(ctx context.Context) db.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB", ctx)
	ret0, _ := ret[0].(db.DB)
	return ret0
}

func (mr *MockCookRepoMockRecorder) DB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockCookRepo)(nil).DB), ctx)
}

func (m *MockCookRepo) GetUser(ctx context.Context, userID string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userID)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (mr *MockCookRepoMockRecorder) GetUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockCookRepo)(nil).GetUser), ctx, userID)
}
