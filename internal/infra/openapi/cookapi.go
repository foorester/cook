// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package openapi

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Retrieve all recipe books
	// (GET /recipe-books)
	GetRecipeBooks(w http.ResponseWriter, r *http.Request)
	// Create a new recipe book
	// (POST /recipe-books)
	PostRecipeBook(w http.ResponseWriter, r *http.Request)
	// Delete a specific recipe book
	// (DELETE /recipe-books/{bookId})
	DeleteBook(w http.ResponseWriter, r *http.Request, bookId string)
	// Retrieve a specific recipe book
	// (GET /recipe-books/{bookId})
	GetBook(w http.ResponseWriter, r *http.Request, bookId string)
	// Update a specific recipe book
	// (PUT /recipe-books/{bookId})
	PutBook(w http.ResponseWriter, r *http.Request, bookId string)
	// Retrieve all recipes in a recipe book
	// (GET /recipe-books/{bookId}/recipes)
	GetRecipes(w http.ResponseWriter, r *http.Request, bookId string)
	// Create a new recipe in a recipe book
	// (POST /recipe-books/{bookId}/recipes)
	PostRecipe(w http.ResponseWriter, r *http.Request, bookId string)
	// Delete a specific recipe in a recipe book
	// (DELETE /recipe-books/{bookId}/recipes/{recipeId})
	DeleteRecipe(w http.ResponseWriter, r *http.Request, bookId string, recipeId string)
	// Retrieve a specific recipe in a recipe book
	// (GET /recipe-books/{bookId}/recipes/{recipeId})
	GetRecipe(w http.ResponseWriter, r *http.Request, bookId string, recipeId string)
	// Update a specific recipe in a recipe book
	// (PUT /recipe-books/{bookId}/recipes/{recipeId})
	PutRecipe(w http.ResponseWriter, r *http.Request, bookId string, recipeId string)
	// Retrieve all direction steps in a recipe
	// (GET /recipe-books/{bookId}/recipes/{recipeId}/direction-steps)
	GetDirectionSteps(w http.ResponseWriter, r *http.Request, bookId string, recipeId string)
	// Create a new direction step in a recipe
	// (POST /recipe-books/{bookId}/recipes/{recipeId}/direction-steps)
	PostDirectionStep(w http.ResponseWriter, r *http.Request, bookId string, recipeId string)
	// Retrieve a specific direction step in a recipe
	// (GET /recipe-books/{bookId}/recipes/{recipeId}/direction-steps/{stepId})
	GetStep(w http.ResponseWriter, r *http.Request, bookId string, recipeId string, stepId string)
	// Update a specific direction step in a recipe
	// (PUT /recipe-books/{bookId}/recipes/{recipeId}/direction-steps/{stepId})
	PutStep(w http.ResponseWriter, r *http.Request, bookId string, recipeId string, stepId string)
	// Retrieve all ingredients in a recipe
	// (GET /recipe-books/{bookId}/recipes/{recipeId}/ingredients)
	GetIngredients(w http.ResponseWriter, r *http.Request, bookId string, recipeId string)
	// Create a new ingredient in a recipe
	// (POST /recipe-books/{bookId}/recipes/{recipeId}/ingredients)
	PostIngredient(w http.ResponseWriter, r *http.Request, bookId string, recipeId string)
	// Delete a specific ingredient in a recipe
	// (DELETE /recipe-books/{bookId}/recipes/{recipeId}/ingredients/{ingredientId})
	DeleteIngredient(w http.ResponseWriter, r *http.Request, bookId string, recipeId string, ingredientId string)
	// Retrieve a specific ingredient in a recipe
	// (GET /recipe-books/{bookId}/recipes/{recipeId}/ingredients/{ingredientId})
	GetIngredient(w http.ResponseWriter, r *http.Request, bookId string, recipeId string, ingredientId string)
	// Update a specific ingredient in a recipe
	// (PUT /recipe-books/{bookId}/recipes/{recipeId}/ingredients/{ingredientId})
	PutIngredient(w http.ResponseWriter, r *http.Request, bookId string, recipeId string, ingredientId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetRecipeBooks operation middleware
func (siw *ServerInterfaceWrapper) GetRecipeBooks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRecipeBooks(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRecipeBook operation middleware
func (siw *ServerInterfaceWrapper) PostRecipeBook(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRecipeBook(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteBook operation middleware
func (siw *ServerInterfaceWrapper) DeleteBook(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBook(w, r, bookId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBook operation middleware
func (siw *ServerInterfaceWrapper) GetBook(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBook(w, r, bookId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutBook operation middleware
func (siw *ServerInterfaceWrapper) PutBook(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutBook(w, r, bookId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRecipes operation middleware
func (siw *ServerInterfaceWrapper) GetRecipes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRecipes(w, r, bookId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRecipe operation middleware
func (siw *ServerInterfaceWrapper) PostRecipe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRecipe(w, r, bookId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteRecipe operation middleware
func (siw *ServerInterfaceWrapper) DeleteRecipe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	// ------------- Path parameter "recipeId" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, chi.URLParam(r, "recipeId"), &recipeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recipeId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteRecipe(w, r, bookId, recipeId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRecipe operation middleware
func (siw *ServerInterfaceWrapper) GetRecipe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	// ------------- Path parameter "recipeId" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, chi.URLParam(r, "recipeId"), &recipeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recipeId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRecipe(w, r, bookId, recipeId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutRecipe operation middleware
func (siw *ServerInterfaceWrapper) PutRecipe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	// ------------- Path parameter "recipeId" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, chi.URLParam(r, "recipeId"), &recipeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recipeId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutRecipe(w, r, bookId, recipeId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDirectionSteps operation middleware
func (siw *ServerInterfaceWrapper) GetDirectionSteps(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	// ------------- Path parameter "recipeId" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, chi.URLParam(r, "recipeId"), &recipeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recipeId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDirectionSteps(w, r, bookId, recipeId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDirectionStep operation middleware
func (siw *ServerInterfaceWrapper) PostDirectionStep(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	// ------------- Path parameter "recipeId" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, chi.URLParam(r, "recipeId"), &recipeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recipeId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDirectionStep(w, r, bookId, recipeId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStep operation middleware
func (siw *ServerInterfaceWrapper) GetStep(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	// ------------- Path parameter "recipeId" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, chi.URLParam(r, "recipeId"), &recipeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recipeId", Err: err})
		return
	}

	// ------------- Path parameter "stepId" -------------
	var stepId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "stepId", runtime.ParamLocationPath, chi.URLParam(r, "stepId"), &stepId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStep(w, r, bookId, recipeId, stepId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutStep operation middleware
func (siw *ServerInterfaceWrapper) PutStep(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	// ------------- Path parameter "recipeId" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, chi.URLParam(r, "recipeId"), &recipeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recipeId", Err: err})
		return
	}

	// ------------- Path parameter "stepId" -------------
	var stepId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "stepId", runtime.ParamLocationPath, chi.URLParam(r, "stepId"), &stepId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutStep(w, r, bookId, recipeId, stepId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIngredients operation middleware
func (siw *ServerInterfaceWrapper) GetIngredients(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	// ------------- Path parameter "recipeId" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, chi.URLParam(r, "recipeId"), &recipeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recipeId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIngredients(w, r, bookId, recipeId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostIngredient operation middleware
func (siw *ServerInterfaceWrapper) PostIngredient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	// ------------- Path parameter "recipeId" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, chi.URLParam(r, "recipeId"), &recipeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recipeId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostIngredient(w, r, bookId, recipeId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteIngredient operation middleware
func (siw *ServerInterfaceWrapper) DeleteIngredient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	// ------------- Path parameter "recipeId" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, chi.URLParam(r, "recipeId"), &recipeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recipeId", Err: err})
		return
	}

	// ------------- Path parameter "ingredientId" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredientId", runtime.ParamLocationPath, chi.URLParam(r, "ingredientId"), &ingredientId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ingredientId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteIngredient(w, r, bookId, recipeId, ingredientId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetIngredient operation middleware
func (siw *ServerInterfaceWrapper) GetIngredient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	// ------------- Path parameter "recipeId" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, chi.URLParam(r, "recipeId"), &recipeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recipeId", Err: err})
		return
	}

	// ------------- Path parameter "ingredientId" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredientId", runtime.ParamLocationPath, chi.URLParam(r, "ingredientId"), &ingredientId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ingredientId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetIngredient(w, r, bookId, recipeId, ingredientId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutIngredient operation middleware
func (siw *ServerInterfaceWrapper) PutIngredient(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "bookId" -------------
	var bookId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "bookId", runtime.ParamLocationPath, chi.URLParam(r, "bookId"), &bookId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookId", Err: err})
		return
	}

	// ------------- Path parameter "recipeId" -------------
	var recipeId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, chi.URLParam(r, "recipeId"), &recipeId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "recipeId", Err: err})
		return
	}

	// ------------- Path parameter "ingredientId" -------------
	var ingredientId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ingredientId", runtime.ParamLocationPath, chi.URLParam(r, "ingredientId"), &ingredientId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ingredientId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutIngredient(w, r, bookId, recipeId, ingredientId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recipe-books", wrapper.GetRecipeBooks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recipe-books", wrapper.PostRecipeBook)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/recipe-books/{bookId}", wrapper.DeleteBook)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recipe-books/{bookId}", wrapper.GetBook)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/recipe-books/{bookId}", wrapper.PutBook)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recipe-books/{bookId}/recipes", wrapper.GetRecipes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recipe-books/{bookId}/recipes", wrapper.PostRecipe)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/recipe-books/{bookId}/recipes/{recipeId}", wrapper.DeleteRecipe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recipe-books/{bookId}/recipes/{recipeId}", wrapper.GetRecipe)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/recipe-books/{bookId}/recipes/{recipeId}", wrapper.PutRecipe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recipe-books/{bookId}/recipes/{recipeId}/direction-steps", wrapper.GetDirectionSteps)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recipe-books/{bookId}/recipes/{recipeId}/direction-steps", wrapper.PostDirectionStep)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recipe-books/{bookId}/recipes/{recipeId}/direction-steps/{stepId}", wrapper.GetStep)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/recipe-books/{bookId}/recipes/{recipeId}/direction-steps/{stepId}", wrapper.PutStep)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recipe-books/{bookId}/recipes/{recipeId}/ingredients", wrapper.GetIngredients)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/recipe-books/{bookId}/recipes/{recipeId}/ingredients", wrapper.PostIngredient)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/recipe-books/{bookId}/recipes/{recipeId}/ingredients/{ingredientId}", wrapper.DeleteIngredient)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/recipe-books/{bookId}/recipes/{recipeId}/ingredients/{ingredientId}", wrapper.GetIngredient)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/recipe-books/{bookId}/recipes/{recipeId}/ingredients/{ingredientId}", wrapper.PutIngredient)
	})

	return r
}
