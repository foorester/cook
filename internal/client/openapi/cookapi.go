// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetRecipeBooks request
	GetRecipeBooks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRecipeBooks request with any body
	PostRecipeBooksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRecipeBooks(ctx context.Context, body PostRecipeBooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecipeBooksBookId request
	DeleteRecipeBooksBookId(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeBooksBookId request
	GetRecipeBooksBookId(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRecipeBooksBookId request with any body
	PutRecipeBooksBookIdWithBody(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRecipeBooksBookId(ctx context.Context, bookId string, body PutRecipeBooksBookIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeBooksBookIdRecipes request
	GetRecipeBooksBookIdRecipes(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRecipeBooksBookIdRecipes request with any body
	PostRecipeBooksBookIdRecipesWithBody(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRecipeBooksBookIdRecipes(ctx context.Context, bookId string, body PostRecipeBooksBookIdRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecipeBooksBookIdRecipesRecipeId request
	DeleteRecipeBooksBookIdRecipesRecipeId(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeBooksBookIdRecipesRecipeId request
	GetRecipeBooksBookIdRecipesRecipeId(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRecipeBooksBookIdRecipesRecipeId request with any body
	PutRecipeBooksBookIdRecipesRecipeIdWithBody(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRecipeBooksBookIdRecipesRecipeId(ctx context.Context, bookId string, recipeId string, body PutRecipeBooksBookIdRecipesRecipeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeBooksBookIdRecipesRecipeIdDirectionSteps request
	GetRecipeBooksBookIdRecipesRecipeIdDirectionSteps(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRecipeBooksBookIdRecipesRecipeIdDirectionSteps request with any body
	PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsWithBody(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRecipeBooksBookIdRecipesRecipeIdDirectionSteps(ctx context.Context, bookId string, recipeId string, body PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepId request
	GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepId(ctx context.Context, bookId string, recipeId string, stepId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepId request with any body
	PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdWithBody(ctx context.Context, bookId string, recipeId string, stepId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepId(ctx context.Context, bookId string, recipeId string, stepId string, body PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeBooksBookIdRecipesRecipeIdIngredients request
	GetRecipeBooksBookIdRecipesRecipeIdIngredients(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRecipeBooksBookIdRecipesRecipeIdIngredients request with any body
	PostRecipeBooksBookIdRecipesRecipeIdIngredientsWithBody(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRecipeBooksBookIdRecipesRecipeIdIngredients(ctx context.Context, bookId string, recipeId string, body PostRecipeBooksBookIdRecipesRecipeIdIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId request
	DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId request
	GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId request with any body
	PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithBody(ctx context.Context, bookId string, recipeId string, ingredientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId(ctx context.Context, bookId string, recipeId string, ingredientId string, body PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetRecipeBooks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeBooksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipeBooksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipeBooksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipeBooks(ctx context.Context, body PostRecipeBooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipeBooksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecipeBooksBookId(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecipeBooksBookIdRequest(c.Server, bookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeBooksBookId(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeBooksBookIdRequest(c.Server, bookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRecipeBooksBookIdWithBody(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRecipeBooksBookIdRequestWithBody(c.Server, bookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRecipeBooksBookId(ctx context.Context, bookId string, body PutRecipeBooksBookIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRecipeBooksBookIdRequest(c.Server, bookId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeBooksBookIdRecipes(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeBooksBookIdRecipesRequest(c.Server, bookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipeBooksBookIdRecipesWithBody(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipeBooksBookIdRecipesRequestWithBody(c.Server, bookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipeBooksBookIdRecipes(ctx context.Context, bookId string, body PostRecipeBooksBookIdRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipeBooksBookIdRecipesRequest(c.Server, bookId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecipeBooksBookIdRecipesRecipeId(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecipeBooksBookIdRecipesRecipeIdRequest(c.Server, bookId, recipeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeBooksBookIdRecipesRecipeId(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeBooksBookIdRecipesRecipeIdRequest(c.Server, bookId, recipeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRecipeBooksBookIdRecipesRecipeIdWithBody(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRecipeBooksBookIdRecipesRecipeIdRequestWithBody(c.Server, bookId, recipeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRecipeBooksBookIdRecipesRecipeId(ctx context.Context, bookId string, recipeId string, body PutRecipeBooksBookIdRecipesRecipeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRecipeBooksBookIdRecipesRecipeIdRequest(c.Server, bookId, recipeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeBooksBookIdRecipesRecipeIdDirectionSteps(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeBooksBookIdRecipesRecipeIdDirectionStepsRequest(c.Server, bookId, recipeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsWithBody(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipeBooksBookIdRecipesRecipeIdDirectionStepsRequestWithBody(c.Server, bookId, recipeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipeBooksBookIdRecipesRecipeIdDirectionSteps(ctx context.Context, bookId string, recipeId string, body PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipeBooksBookIdRecipesRecipeIdDirectionStepsRequest(c.Server, bookId, recipeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepId(ctx context.Context, bookId string, recipeId string, stepId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdRequest(c.Server, bookId, recipeId, stepId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdWithBody(ctx context.Context, bookId string, recipeId string, stepId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdRequestWithBody(c.Server, bookId, recipeId, stepId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepId(ctx context.Context, bookId string, recipeId string, stepId string, body PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdRequest(c.Server, bookId, recipeId, stepId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeBooksBookIdRecipesRecipeIdIngredients(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeBooksBookIdRecipesRecipeIdIngredientsRequest(c.Server, bookId, recipeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipeBooksBookIdRecipesRecipeIdIngredientsWithBody(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipeBooksBookIdRecipesRecipeIdIngredientsRequestWithBody(c.Server, bookId, recipeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipeBooksBookIdRecipesRecipeIdIngredients(ctx context.Context, bookId string, recipeId string, body PostRecipeBooksBookIdRecipesRecipeIdIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipeBooksBookIdRecipesRecipeIdIngredientsRequest(c.Server, bookId, recipeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdRequest(c.Server, bookId, recipeId, ingredientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdRequest(c.Server, bookId, recipeId, ingredientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithBody(ctx context.Context, bookId string, recipeId string, ingredientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdRequestWithBody(c.Server, bookId, recipeId, ingredientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId(ctx context.Context, bookId string, recipeId string, ingredientId string, body PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdRequest(c.Server, bookId, recipeId, ingredientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetRecipeBooksRequest generates requests for GetRecipeBooks
func NewGetRecipeBooksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRecipeBooksRequest calls the generic PostRecipeBooks builder with application/json body
func NewPostRecipeBooksRequest(server string, body PostRecipeBooksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRecipeBooksRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRecipeBooksRequestWithBody generates requests for PostRecipeBooks with any type of body
func NewPostRecipeBooksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRecipeBooksBookIdRequest generates requests for DeleteRecipeBooksBookId
func NewDeleteRecipeBooksBookIdRequest(server string, bookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeBooksBookIdRequest generates requests for GetRecipeBooksBookId
func NewGetRecipeBooksBookIdRequest(server string, bookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRecipeBooksBookIdRequest calls the generic PutRecipeBooksBookId builder with application/json body
func NewPutRecipeBooksBookIdRequest(server string, bookId string, body PutRecipeBooksBookIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRecipeBooksBookIdRequestWithBody(server, bookId, "application/json", bodyReader)
}

// NewPutRecipeBooksBookIdRequestWithBody generates requests for PutRecipeBooksBookId with any type of body
func NewPutRecipeBooksBookIdRequestWithBody(server string, bookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRecipeBooksBookIdRecipesRequest generates requests for GetRecipeBooksBookIdRecipes
func NewGetRecipeBooksBookIdRecipesRequest(server string, bookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRecipeBooksBookIdRecipesRequest calls the generic PostRecipeBooksBookIdRecipes builder with application/json body
func NewPostRecipeBooksBookIdRecipesRequest(server string, bookId string, body PostRecipeBooksBookIdRecipesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRecipeBooksBookIdRecipesRequestWithBody(server, bookId, "application/json", bodyReader)
}

// NewPostRecipeBooksBookIdRecipesRequestWithBody generates requests for PostRecipeBooksBookIdRecipes with any type of body
func NewPostRecipeBooksBookIdRecipesRequestWithBody(server string, bookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRecipeBooksBookIdRecipesRecipeIdRequest generates requests for DeleteRecipeBooksBookIdRecipesRecipeId
func NewDeleteRecipeBooksBookIdRecipesRecipeIdRequest(server string, bookId string, recipeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeBooksBookIdRecipesRecipeIdRequest generates requests for GetRecipeBooksBookIdRecipesRecipeId
func NewGetRecipeBooksBookIdRecipesRecipeIdRequest(server string, bookId string, recipeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRecipeBooksBookIdRecipesRecipeIdRequest calls the generic PutRecipeBooksBookIdRecipesRecipeId builder with application/json body
func NewPutRecipeBooksBookIdRecipesRecipeIdRequest(server string, bookId string, recipeId string, body PutRecipeBooksBookIdRecipesRecipeIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRecipeBooksBookIdRecipesRecipeIdRequestWithBody(server, bookId, recipeId, "application/json", bodyReader)
}

// NewPutRecipeBooksBookIdRecipesRecipeIdRequestWithBody generates requests for PutRecipeBooksBookIdRecipesRecipeId with any type of body
func NewPutRecipeBooksBookIdRecipesRecipeIdRequestWithBody(server string, bookId string, recipeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRecipeBooksBookIdRecipesRecipeIdDirectionStepsRequest generates requests for GetRecipeBooksBookIdRecipesRecipeIdDirectionSteps
func NewGetRecipeBooksBookIdRecipesRecipeIdDirectionStepsRequest(server string, bookId string, recipeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes/%s/direction-steps", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRecipeBooksBookIdRecipesRecipeIdDirectionStepsRequest calls the generic PostRecipeBooksBookIdRecipesRecipeIdDirectionSteps builder with application/json body
func NewPostRecipeBooksBookIdRecipesRecipeIdDirectionStepsRequest(server string, bookId string, recipeId string, body PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRecipeBooksBookIdRecipesRecipeIdDirectionStepsRequestWithBody(server, bookId, recipeId, "application/json", bodyReader)
}

// NewPostRecipeBooksBookIdRecipesRecipeIdDirectionStepsRequestWithBody generates requests for PostRecipeBooksBookIdRecipesRecipeIdDirectionSteps with any type of body
func NewPostRecipeBooksBookIdRecipesRecipeIdDirectionStepsRequestWithBody(server string, bookId string, recipeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes/%s/direction-steps", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdRequest generates requests for GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepId
func NewGetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdRequest(server string, bookId string, recipeId string, stepId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stepId", runtime.ParamLocationPath, stepId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes/%s/direction-steps/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdRequest calls the generic PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepId builder with application/json body
func NewPutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdRequest(server string, bookId string, recipeId string, stepId string, body PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdRequestWithBody(server, bookId, recipeId, stepId, "application/json", bodyReader)
}

// NewPutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdRequestWithBody generates requests for PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepId with any type of body
func NewPutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdRequestWithBody(server string, bookId string, recipeId string, stepId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stepId", runtime.ParamLocationPath, stepId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes/%s/direction-steps/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRecipeBooksBookIdRecipesRecipeIdIngredientsRequest generates requests for GetRecipeBooksBookIdRecipesRecipeIdIngredients
func NewGetRecipeBooksBookIdRecipesRecipeIdIngredientsRequest(server string, bookId string, recipeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes/%s/ingredients", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRecipeBooksBookIdRecipesRecipeIdIngredientsRequest calls the generic PostRecipeBooksBookIdRecipesRecipeIdIngredients builder with application/json body
func NewPostRecipeBooksBookIdRecipesRecipeIdIngredientsRequest(server string, bookId string, recipeId string, body PostRecipeBooksBookIdRecipesRecipeIdIngredientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRecipeBooksBookIdRecipesRecipeIdIngredientsRequestWithBody(server, bookId, recipeId, "application/json", bodyReader)
}

// NewPostRecipeBooksBookIdRecipesRecipeIdIngredientsRequestWithBody generates requests for PostRecipeBooksBookIdRecipesRecipeIdIngredients with any type of body
func NewPostRecipeBooksBookIdRecipesRecipeIdIngredientsRequestWithBody(server string, bookId string, recipeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes/%s/ingredients", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdRequest generates requests for DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId
func NewDeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdRequest(server string, bookId string, recipeId string, ingredientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "ingredientId", runtime.ParamLocationPath, ingredientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes/%s/ingredients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdRequest generates requests for GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId
func NewGetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdRequest(server string, bookId string, recipeId string, ingredientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "ingredientId", runtime.ParamLocationPath, ingredientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes/%s/ingredients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdRequest calls the generic PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId builder with application/json body
func NewPutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdRequest(server string, bookId string, recipeId string, ingredientId string, body PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdRequestWithBody(server, bookId, recipeId, ingredientId, "application/json", bodyReader)
}

// NewPutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdRequestWithBody generates requests for PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId with any type of body
func NewPutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdRequestWithBody(server string, bookId string, recipeId string, ingredientId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "ingredientId", runtime.ParamLocationPath, ingredientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/recipe-books/%s/recipes/%s/ingredients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetRecipeBooks request
	GetRecipeBooksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRecipeBooksResponse, error)

	// PostRecipeBooks request with any body
	PostRecipeBooksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipeBooksResponse, error)

	PostRecipeBooksWithResponse(ctx context.Context, body PostRecipeBooksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipeBooksResponse, error)

	// DeleteRecipeBooksBookId request
	DeleteRecipeBooksBookIdWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*DeleteRecipeBooksBookIdResponse, error)

	// GetRecipeBooksBookId request
	GetRecipeBooksBookIdWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdResponse, error)

	// PutRecipeBooksBookId request with any body
	PutRecipeBooksBookIdWithBodyWithResponse(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdResponse, error)

	PutRecipeBooksBookIdWithResponse(ctx context.Context, bookId string, body PutRecipeBooksBookIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdResponse, error)

	// GetRecipeBooksBookIdRecipes request
	GetRecipeBooksBookIdRecipesWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdRecipesResponse, error)

	// PostRecipeBooksBookIdRecipes request with any body
	PostRecipeBooksBookIdRecipesWithBodyWithResponse(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipeBooksBookIdRecipesResponse, error)

	PostRecipeBooksBookIdRecipesWithResponse(ctx context.Context, bookId string, body PostRecipeBooksBookIdRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipeBooksBookIdRecipesResponse, error)

	// DeleteRecipeBooksBookIdRecipesRecipeId request
	DeleteRecipeBooksBookIdRecipesRecipeIdWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*DeleteRecipeBooksBookIdRecipesRecipeIdResponse, error)

	// GetRecipeBooksBookIdRecipesRecipeId request
	GetRecipeBooksBookIdRecipesRecipeIdWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdRecipesRecipeIdResponse, error)

	// PutRecipeBooksBookIdRecipesRecipeId request with any body
	PutRecipeBooksBookIdRecipesRecipeIdWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdRecipesRecipeIdResponse, error)

	PutRecipeBooksBookIdRecipesRecipeIdWithResponse(ctx context.Context, bookId string, recipeId string, body PutRecipeBooksBookIdRecipesRecipeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdRecipesRecipeIdResponse, error)

	// GetRecipeBooksBookIdRecipesRecipeIdDirectionSteps request
	GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse, error)

	// PostRecipeBooksBookIdRecipesRecipeIdDirectionSteps request with any body
	PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse, error)

	PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsWithResponse(ctx context.Context, bookId string, recipeId string, body PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse, error)

	// GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepId request
	GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdWithResponse(ctx context.Context, bookId string, recipeId string, stepId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse, error)

	// PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepId request with any body
	PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, stepId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse, error)

	PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdWithResponse(ctx context.Context, bookId string, recipeId string, stepId string, body PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse, error)

	// GetRecipeBooksBookIdRecipesRecipeIdIngredients request
	GetRecipeBooksBookIdRecipesRecipeIdIngredientsWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdRecipesRecipeIdIngredientsResponse, error)

	// PostRecipeBooksBookIdRecipesRecipeIdIngredients request with any body
	PostRecipeBooksBookIdRecipesRecipeIdIngredientsWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse, error)

	PostRecipeBooksBookIdRecipesRecipeIdIngredientsWithResponse(ctx context.Context, bookId string, recipeId string, body PostRecipeBooksBookIdRecipesRecipeIdIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse, error)

	// DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId request
	DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse, error)

	// GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId request
	GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse, error)

	// PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId request with any body
	PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse, error)

	PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, body PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse, error)
}

type GetRecipeBooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecipeBookList
}

// Status returns HTTPResponse.Status
func (r GetRecipeBooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeBooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRecipeBooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RecipeBook
}

// Status returns HTTPResponse.Status
func (r PostRecipeBooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRecipeBooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecipeBooksBookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRecipeBooksBookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecipeBooksBookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeBooksBookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecipeBook
}

// Status returns HTTPResponse.Status
func (r GetRecipeBooksBookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeBooksBookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRecipeBooksBookIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecipeBook
}

// Status returns HTTPResponse.Status
func (r PutRecipeBooksBookIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRecipeBooksBookIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeBooksBookIdRecipesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecipeList
}

// Status returns HTTPResponse.Status
func (r GetRecipeBooksBookIdRecipesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeBooksBookIdRecipesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRecipeBooksBookIdRecipesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Recipe
}

// Status returns HTTPResponse.Status
func (r PostRecipeBooksBookIdRecipesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRecipeBooksBookIdRecipesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecipeBooksBookIdRecipesRecipeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRecipeBooksBookIdRecipesRecipeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecipeBooksBookIdRecipesRecipeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeBooksBookIdRecipesRecipeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRecipeBooksBookIdRecipesRecipeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeBooksBookIdRecipesRecipeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRecipeBooksBookIdRecipesRecipeIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Recipe
}

// Status returns HTTPResponse.Status
func (r PutRecipeBooksBookIdRecipesRecipeIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRecipeBooksBookIdRecipesRecipeIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DirectionStepList
}

// Status returns HTTPResponse.Status
func (r GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *DirectionStep
}

// Status returns HTTPResponse.Status
func (r PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DirectionStep
}

// Status returns HTTPResponse.Status
func (r GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeBooksBookIdRecipesRecipeIdIngredientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IngredientList
}

// Status returns HTTPResponse.Status
func (r GetRecipeBooksBookIdRecipesRecipeIdIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeBooksBookIdRecipesRecipeIdIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Ingredient
}

// Status returns HTTPResponse.Status
func (r PostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ingredient
}

// Status returns HTTPResponse.Status
func (r GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ingredient
}

// Status returns HTTPResponse.Status
func (r PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetRecipeBooksWithResponse request returning *GetRecipeBooksResponse
func (c *ClientWithResponses) GetRecipeBooksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRecipeBooksResponse, error) {
	rsp, err := c.GetRecipeBooks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeBooksResponse(rsp)
}

// PostRecipeBooksWithBodyWithResponse request with arbitrary body returning *PostRecipeBooksResponse
func (c *ClientWithResponses) PostRecipeBooksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipeBooksResponse, error) {
	rsp, err := c.PostRecipeBooksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipeBooksResponse(rsp)
}

func (c *ClientWithResponses) PostRecipeBooksWithResponse(ctx context.Context, body PostRecipeBooksJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipeBooksResponse, error) {
	rsp, err := c.PostRecipeBooks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipeBooksResponse(rsp)
}

// DeleteRecipeBooksBookIdWithResponse request returning *DeleteRecipeBooksBookIdResponse
func (c *ClientWithResponses) DeleteRecipeBooksBookIdWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*DeleteRecipeBooksBookIdResponse, error) {
	rsp, err := c.DeleteRecipeBooksBookId(ctx, bookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecipeBooksBookIdResponse(rsp)
}

// GetRecipeBooksBookIdWithResponse request returning *GetRecipeBooksBookIdResponse
func (c *ClientWithResponses) GetRecipeBooksBookIdWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdResponse, error) {
	rsp, err := c.GetRecipeBooksBookId(ctx, bookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeBooksBookIdResponse(rsp)
}

// PutRecipeBooksBookIdWithBodyWithResponse request with arbitrary body returning *PutRecipeBooksBookIdResponse
func (c *ClientWithResponses) PutRecipeBooksBookIdWithBodyWithResponse(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdResponse, error) {
	rsp, err := c.PutRecipeBooksBookIdWithBody(ctx, bookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRecipeBooksBookIdResponse(rsp)
}

func (c *ClientWithResponses) PutRecipeBooksBookIdWithResponse(ctx context.Context, bookId string, body PutRecipeBooksBookIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdResponse, error) {
	rsp, err := c.PutRecipeBooksBookId(ctx, bookId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRecipeBooksBookIdResponse(rsp)
}

// GetRecipeBooksBookIdRecipesWithResponse request returning *GetRecipeBooksBookIdRecipesResponse
func (c *ClientWithResponses) GetRecipeBooksBookIdRecipesWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdRecipesResponse, error) {
	rsp, err := c.GetRecipeBooksBookIdRecipes(ctx, bookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeBooksBookIdRecipesResponse(rsp)
}

// PostRecipeBooksBookIdRecipesWithBodyWithResponse request with arbitrary body returning *PostRecipeBooksBookIdRecipesResponse
func (c *ClientWithResponses) PostRecipeBooksBookIdRecipesWithBodyWithResponse(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipeBooksBookIdRecipesResponse, error) {
	rsp, err := c.PostRecipeBooksBookIdRecipesWithBody(ctx, bookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipeBooksBookIdRecipesResponse(rsp)
}

func (c *ClientWithResponses) PostRecipeBooksBookIdRecipesWithResponse(ctx context.Context, bookId string, body PostRecipeBooksBookIdRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipeBooksBookIdRecipesResponse, error) {
	rsp, err := c.PostRecipeBooksBookIdRecipes(ctx, bookId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipeBooksBookIdRecipesResponse(rsp)
}

// DeleteRecipeBooksBookIdRecipesRecipeIdWithResponse request returning *DeleteRecipeBooksBookIdRecipesRecipeIdResponse
func (c *ClientWithResponses) DeleteRecipeBooksBookIdRecipesRecipeIdWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*DeleteRecipeBooksBookIdRecipesRecipeIdResponse, error) {
	rsp, err := c.DeleteRecipeBooksBookIdRecipesRecipeId(ctx, bookId, recipeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecipeBooksBookIdRecipesRecipeIdResponse(rsp)
}

// GetRecipeBooksBookIdRecipesRecipeIdWithResponse request returning *GetRecipeBooksBookIdRecipesRecipeIdResponse
func (c *ClientWithResponses) GetRecipeBooksBookIdRecipesRecipeIdWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdRecipesRecipeIdResponse, error) {
	rsp, err := c.GetRecipeBooksBookIdRecipesRecipeId(ctx, bookId, recipeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeBooksBookIdRecipesRecipeIdResponse(rsp)
}

// PutRecipeBooksBookIdRecipesRecipeIdWithBodyWithResponse request with arbitrary body returning *PutRecipeBooksBookIdRecipesRecipeIdResponse
func (c *ClientWithResponses) PutRecipeBooksBookIdRecipesRecipeIdWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdRecipesRecipeIdResponse, error) {
	rsp, err := c.PutRecipeBooksBookIdRecipesRecipeIdWithBody(ctx, bookId, recipeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRecipeBooksBookIdRecipesRecipeIdResponse(rsp)
}

func (c *ClientWithResponses) PutRecipeBooksBookIdRecipesRecipeIdWithResponse(ctx context.Context, bookId string, recipeId string, body PutRecipeBooksBookIdRecipesRecipeIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdRecipesRecipeIdResponse, error) {
	rsp, err := c.PutRecipeBooksBookIdRecipesRecipeId(ctx, bookId, recipeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRecipeBooksBookIdRecipesRecipeIdResponse(rsp)
}

// GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsWithResponse request returning *GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse
func (c *ClientWithResponses) GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse, error) {
	rsp, err := c.GetRecipeBooksBookIdRecipesRecipeIdDirectionSteps(ctx, bookId, recipeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse(rsp)
}

// PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsWithBodyWithResponse request with arbitrary body returning *PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse
func (c *ClientWithResponses) PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse, error) {
	rsp, err := c.PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsWithBody(ctx, bookId, recipeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse(rsp)
}

func (c *ClientWithResponses) PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsWithResponse(ctx context.Context, bookId string, recipeId string, body PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse, error) {
	rsp, err := c.PostRecipeBooksBookIdRecipesRecipeIdDirectionSteps(ctx, bookId, recipeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse(rsp)
}

// GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdWithResponse request returning *GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse
func (c *ClientWithResponses) GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdWithResponse(ctx context.Context, bookId string, recipeId string, stepId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse, error) {
	rsp, err := c.GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepId(ctx, bookId, recipeId, stepId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse(rsp)
}

// PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdWithBodyWithResponse request with arbitrary body returning *PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse
func (c *ClientWithResponses) PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, stepId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse, error) {
	rsp, err := c.PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdWithBody(ctx, bookId, recipeId, stepId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse(rsp)
}

func (c *ClientWithResponses) PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdWithResponse(ctx context.Context, bookId string, recipeId string, stepId string, body PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse, error) {
	rsp, err := c.PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepId(ctx, bookId, recipeId, stepId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse(rsp)
}

// GetRecipeBooksBookIdRecipesRecipeIdIngredientsWithResponse request returning *GetRecipeBooksBookIdRecipesRecipeIdIngredientsResponse
func (c *ClientWithResponses) GetRecipeBooksBookIdRecipesRecipeIdIngredientsWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdRecipesRecipeIdIngredientsResponse, error) {
	rsp, err := c.GetRecipeBooksBookIdRecipesRecipeIdIngredients(ctx, bookId, recipeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeBooksBookIdRecipesRecipeIdIngredientsResponse(rsp)
}

// PostRecipeBooksBookIdRecipesRecipeIdIngredientsWithBodyWithResponse request with arbitrary body returning *PostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse
func (c *ClientWithResponses) PostRecipeBooksBookIdRecipesRecipeIdIngredientsWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse, error) {
	rsp, err := c.PostRecipeBooksBookIdRecipesRecipeIdIngredientsWithBody(ctx, bookId, recipeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse(rsp)
}

func (c *ClientWithResponses) PostRecipeBooksBookIdRecipesRecipeIdIngredientsWithResponse(ctx context.Context, bookId string, recipeId string, body PostRecipeBooksBookIdRecipesRecipeIdIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse, error) {
	rsp, err := c.PostRecipeBooksBookIdRecipesRecipeIdIngredients(ctx, bookId, recipeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse(rsp)
}

// DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithResponse request returning *DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse
func (c *ClientWithResponses) DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse, error) {
	rsp, err := c.DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId(ctx, bookId, recipeId, ingredientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse(rsp)
}

// GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithResponse request returning *GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse
func (c *ClientWithResponses) GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse, error) {
	rsp, err := c.GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId(ctx, bookId, recipeId, ingredientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse(rsp)
}

// PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithBodyWithResponse request with arbitrary body returning *PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse
func (c *ClientWithResponses) PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse, error) {
	rsp, err := c.PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithBody(ctx, bookId, recipeId, ingredientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse(rsp)
}

func (c *ClientWithResponses) PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, body PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse, error) {
	rsp, err := c.PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientId(ctx, bookId, recipeId, ingredientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse(rsp)
}

// ParseGetRecipeBooksResponse parses an HTTP response from a GetRecipeBooksWithResponse call
func ParseGetRecipeBooksResponse(rsp *http.Response) (*GetRecipeBooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeBooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecipeBookList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRecipeBooksResponse parses an HTTP response from a PostRecipeBooksWithResponse call
func ParsePostRecipeBooksResponse(rsp *http.Response) (*PostRecipeBooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRecipeBooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RecipeBook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteRecipeBooksBookIdResponse parses an HTTP response from a DeleteRecipeBooksBookIdWithResponse call
func ParseDeleteRecipeBooksBookIdResponse(rsp *http.Response) (*DeleteRecipeBooksBookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecipeBooksBookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRecipeBooksBookIdResponse parses an HTTP response from a GetRecipeBooksBookIdWithResponse call
func ParseGetRecipeBooksBookIdResponse(rsp *http.Response) (*GetRecipeBooksBookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeBooksBookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecipeBook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutRecipeBooksBookIdResponse parses an HTTP response from a PutRecipeBooksBookIdWithResponse call
func ParsePutRecipeBooksBookIdResponse(rsp *http.Response) (*PutRecipeBooksBookIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRecipeBooksBookIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecipeBook
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRecipeBooksBookIdRecipesResponse parses an HTTP response from a GetRecipeBooksBookIdRecipesWithResponse call
func ParseGetRecipeBooksBookIdRecipesResponse(rsp *http.Response) (*GetRecipeBooksBookIdRecipesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeBooksBookIdRecipesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecipeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRecipeBooksBookIdRecipesResponse parses an HTTP response from a PostRecipeBooksBookIdRecipesWithResponse call
func ParsePostRecipeBooksBookIdRecipesResponse(rsp *http.Response) (*PostRecipeBooksBookIdRecipesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRecipeBooksBookIdRecipesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Recipe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteRecipeBooksBookIdRecipesRecipeIdResponse parses an HTTP response from a DeleteRecipeBooksBookIdRecipesRecipeIdWithResponse call
func ParseDeleteRecipeBooksBookIdRecipesRecipeIdResponse(rsp *http.Response) (*DeleteRecipeBooksBookIdRecipesRecipeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecipeBooksBookIdRecipesRecipeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRecipeBooksBookIdRecipesRecipeIdResponse parses an HTTP response from a GetRecipeBooksBookIdRecipesRecipeIdWithResponse call
func ParseGetRecipeBooksBookIdRecipesRecipeIdResponse(rsp *http.Response) (*GetRecipeBooksBookIdRecipesRecipeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeBooksBookIdRecipesRecipeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRecipeBooksBookIdRecipesRecipeIdResponse parses an HTTP response from a PutRecipeBooksBookIdRecipesRecipeIdWithResponse call
func ParsePutRecipeBooksBookIdRecipesRecipeIdResponse(rsp *http.Response) (*PutRecipeBooksBookIdRecipesRecipeIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRecipeBooksBookIdRecipesRecipeIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Recipe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse parses an HTTP response from a GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsWithResponse call
func ParseGetRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse(rsp *http.Response) (*GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DirectionStepList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse parses an HTTP response from a PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsWithResponse call
func ParsePostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse(rsp *http.Response) (*PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRecipeBooksBookIdRecipesRecipeIdDirectionStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest DirectionStep
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse parses an HTTP response from a GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdWithResponse call
func ParseGetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse(rsp *http.Response) (*GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DirectionStep
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse parses an HTTP response from a PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdWithResponse call
func ParsePutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse(rsp *http.Response) (*PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRecipeBooksBookIdRecipesRecipeIdDirectionStepsStepIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRecipeBooksBookIdRecipesRecipeIdIngredientsResponse parses an HTTP response from a GetRecipeBooksBookIdRecipesRecipeIdIngredientsWithResponse call
func ParseGetRecipeBooksBookIdRecipesRecipeIdIngredientsResponse(rsp *http.Response) (*GetRecipeBooksBookIdRecipesRecipeIdIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeBooksBookIdRecipesRecipeIdIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IngredientList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse parses an HTTP response from a PostRecipeBooksBookIdRecipesRecipeIdIngredientsWithResponse call
func ParsePostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse(rsp *http.Response) (*PostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRecipeBooksBookIdRecipesRecipeIdIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Ingredient
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse parses an HTTP response from a DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithResponse call
func ParseDeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse(rsp *http.Response) (*DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse parses an HTTP response from a GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithResponse call
func ParseGetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse(rsp *http.Response) (*GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ingredient
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse parses an HTTP response from a PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdWithResponse call
func ParsePutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse(rsp *http.Response) (*PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRecipeBooksBookIdRecipesRecipeIdIngredientsIngredientIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ingredient
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
