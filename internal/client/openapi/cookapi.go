// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/foorester/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBooks request
	GetBooks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBook request with any body
	PostBookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBook(ctx context.Context, body PostBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBook request
	DeleteBook(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBook request
	GetBook(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutBook request with any body
	PutBookWithBody(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutBook(ctx context.Context, bookId string, body PutBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipes request
	GetRecipes(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRecipe request with any body
	PostRecipeWithBody(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRecipe(ctx context.Context, bookId string, body PostRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecipe request
	DeleteRecipe(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipe request
	GetRecipe(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRecipe request with any body
	PutRecipeWithBody(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRecipe(ctx context.Context, bookId string, recipeId string, body PutRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIngredients request
	GetIngredients(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostIngredient request with any body
	PostIngredientWithBody(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostIngredient(ctx context.Context, bookId string, recipeId string, body PostIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIngredient request
	DeleteIngredient(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIngredient request
	GetIngredient(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutIngredient request with any body
	PutIngredientWithBody(ctx context.Context, bookId string, recipeId string, ingredientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutIngredient(ctx context.Context, bookId string, recipeId string, ingredientId string, body PutIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSteps request
	GetSteps(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStep request with any body
	PostStepWithBody(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStep(ctx context.Context, bookId string, recipeId string, body PostStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStep request
	GetStep(ctx context.Context, bookId string, recipeId string, stepId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutStep request with any body
	PutStepWithBody(ctx context.Context, bookId string, recipeId string, stepId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutStep(ctx context.Context, bookId string, recipeId string, stepId string, body PutStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBooks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBooksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBook(ctx context.Context, body PostBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBook(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBookRequest(c.Server, bookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBook(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookRequest(c.Server, bookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBookWithBody(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBookRequestWithBody(c.Server, bookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutBook(ctx context.Context, bookId string, body PutBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutBookRequest(c.Server, bookId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipes(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipesRequest(c.Server, bookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipeWithBody(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipeRequestWithBody(c.Server, bookId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRecipe(ctx context.Context, bookId string, body PostRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRecipeRequest(c.Server, bookId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecipe(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecipeRequest(c.Server, bookId, recipeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipe(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeRequest(c.Server, bookId, recipeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRecipeWithBody(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRecipeRequestWithBody(c.Server, bookId, recipeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRecipe(ctx context.Context, bookId string, recipeId string, body PutRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRecipeRequest(c.Server, bookId, recipeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIngredients(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIngredientsRequest(c.Server, bookId, recipeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIngredientWithBody(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIngredientRequestWithBody(c.Server, bookId, recipeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostIngredient(ctx context.Context, bookId string, recipeId string, body PostIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostIngredientRequest(c.Server, bookId, recipeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIngredient(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIngredientRequest(c.Server, bookId, recipeId, ingredientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIngredient(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIngredientRequest(c.Server, bookId, recipeId, ingredientId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIngredientWithBody(ctx context.Context, bookId string, recipeId string, ingredientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIngredientRequestWithBody(c.Server, bookId, recipeId, ingredientId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutIngredient(ctx context.Context, bookId string, recipeId string, ingredientId string, body PutIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutIngredientRequest(c.Server, bookId, recipeId, ingredientId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSteps(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStepsRequest(c.Server, bookId, recipeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStepWithBody(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStepRequestWithBody(c.Server, bookId, recipeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStep(ctx context.Context, bookId string, recipeId string, body PostStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStepRequest(c.Server, bookId, recipeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStep(ctx context.Context, bookId string, recipeId string, stepId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStepRequest(c.Server, bookId, recipeId, stepId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStepWithBody(ctx context.Context, bookId string, recipeId string, stepId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStepRequestWithBody(c.Server, bookId, recipeId, stepId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutStep(ctx context.Context, bookId string, recipeId string, stepId string, body PutStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutStepRequest(c.Server, bookId, recipeId, stepId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBooksRequest generates requests for GetBooks
func NewGetBooksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBookRequest calls the generic PostBook builder with application/json body
func NewPostBookRequest(server string, body PostBookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBookRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBookRequestWithBody generates requests for PostBook with any type of body
func NewPostBookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteBookRequest generates requests for DeleteBook
func NewDeleteBookRequest(server string, bookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBookRequest generates requests for GetBook
func NewGetBookRequest(server string, bookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutBookRequest calls the generic PutBook builder with application/json body
func NewPutBookRequest(server string, bookId string, body PutBookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutBookRequestWithBody(server, bookId, "application/json", bodyReader)
}

// NewPutBookRequestWithBody generates requests for PutBook with any type of body
func NewPutBookRequestWithBody(server string, bookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRecipesRequest generates requests for GetRecipes
func NewGetRecipesRequest(server string, bookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRecipeRequest calls the generic PostRecipe builder with application/json body
func NewPostRecipeRequest(server string, bookId string, body PostRecipeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRecipeRequestWithBody(server, bookId, "application/json", bodyReader)
}

// NewPostRecipeRequestWithBody generates requests for PostRecipe with any type of body
func NewPostRecipeRequestWithBody(server string, bookId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRecipeRequest generates requests for DeleteRecipe
func NewDeleteRecipeRequest(server string, bookId string, recipeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeRequest generates requests for GetRecipe
func NewGetRecipeRequest(server string, bookId string, recipeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutRecipeRequest calls the generic PutRecipe builder with application/json body
func NewPutRecipeRequest(server string, bookId string, recipeId string, body PutRecipeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRecipeRequestWithBody(server, bookId, recipeId, "application/json", bodyReader)
}

// NewPutRecipeRequestWithBody generates requests for PutRecipe with any type of body
func NewPutRecipeRequestWithBody(server string, bookId string, recipeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetIngredientsRequest generates requests for GetIngredients
func NewGetIngredientsRequest(server string, bookId string, recipeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes/%s/ingredients", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostIngredientRequest calls the generic PostIngredient builder with application/json body
func NewPostIngredientRequest(server string, bookId string, recipeId string, body PostIngredientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostIngredientRequestWithBody(server, bookId, recipeId, "application/json", bodyReader)
}

// NewPostIngredientRequestWithBody generates requests for PostIngredient with any type of body
func NewPostIngredientRequestWithBody(server string, bookId string, recipeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes/%s/ingredients", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteIngredientRequest generates requests for DeleteIngredient
func NewDeleteIngredientRequest(server string, bookId string, recipeId string, ingredientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "ingredientId", runtime.ParamLocationPath, ingredientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes/%s/ingredients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIngredientRequest generates requests for GetIngredient
func NewGetIngredientRequest(server string, bookId string, recipeId string, ingredientId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "ingredientId", runtime.ParamLocationPath, ingredientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes/%s/ingredients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutIngredientRequest calls the generic PutIngredient builder with application/json body
func NewPutIngredientRequest(server string, bookId string, recipeId string, ingredientId string, body PutIngredientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutIngredientRequestWithBody(server, bookId, recipeId, ingredientId, "application/json", bodyReader)
}

// NewPutIngredientRequestWithBody generates requests for PutIngredient with any type of body
func NewPutIngredientRequestWithBody(server string, bookId string, recipeId string, ingredientId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "ingredientId", runtime.ParamLocationPath, ingredientId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes/%s/ingredients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStepsRequest generates requests for GetSteps
func NewGetStepsRequest(server string, bookId string, recipeId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes/%s/steps", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostStepRequest calls the generic PostStep builder with application/json body
func NewPostStepRequest(server string, bookId string, recipeId string, body PostStepJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStepRequestWithBody(server, bookId, recipeId, "application/json", bodyReader)
}

// NewPostStepRequestWithBody generates requests for PostStep with any type of body
func NewPostStepRequestWithBody(server string, bookId string, recipeId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes/%s/steps", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStepRequest generates requests for GetStep
func NewGetStepRequest(server string, bookId string, recipeId string, stepId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stepId", runtime.ParamLocationPath, stepId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes/%s/steps/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutStepRequest calls the generic PutStep builder with application/json body
func NewPutStepRequest(server string, bookId string, recipeId string, stepId string, body PutStepJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutStepRequestWithBody(server, bookId, recipeId, stepId, "application/json", bodyReader)
}

// NewPutStepRequestWithBody generates requests for PutStep with any type of body
func NewPutStepRequestWithBody(server string, bookId string, recipeId string, stepId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeId", runtime.ParamLocationPath, recipeId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "stepId", runtime.ParamLocationPath, stepId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/books/%s/recipes/%s/steps/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBooks request
	GetBooksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBooksResponse, error)

	// PostBook request with any body
	PostBookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBookResponse, error)

	PostBookWithResponse(ctx context.Context, body PostBookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBookResponse, error)

	// DeleteBook request
	DeleteBookWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*DeleteBookResponse, error)

	// GetBook request
	GetBookWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetBookResponse, error)

	// PutBook request with any body
	PutBookWithBodyWithResponse(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBookResponse, error)

	PutBookWithResponse(ctx context.Context, bookId string, body PutBookJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBookResponse, error)

	// GetRecipes request
	GetRecipesWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetRecipesResponse, error)

	// PostRecipe request with any body
	PostRecipeWithBodyWithResponse(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipeResponse, error)

	PostRecipeWithResponse(ctx context.Context, bookId string, body PostRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipeResponse, error)

	// DeleteRecipe request
	DeleteRecipeWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*DeleteRecipeResponse, error)

	// GetRecipe request
	GetRecipeWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*GetRecipeResponse, error)

	// PutRecipe request with any body
	PutRecipeWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRecipeResponse, error)

	PutRecipeWithResponse(ctx context.Context, bookId string, recipeId string, body PutRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRecipeResponse, error)

	// GetIngredients request
	GetIngredientsWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*GetIngredientsResponse, error)

	// PostIngredient request with any body
	PostIngredientWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIngredientResponse, error)

	PostIngredientWithResponse(ctx context.Context, bookId string, recipeId string, body PostIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIngredientResponse, error)

	// DeleteIngredient request
	DeleteIngredientWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*DeleteIngredientResponse, error)

	// GetIngredient request
	GetIngredientWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*GetIngredientResponse, error)

	// PutIngredient request with any body
	PutIngredientWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIngredientResponse, error)

	PutIngredientWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, body PutIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIngredientResponse, error)

	// GetSteps request
	GetStepsWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*GetStepsResponse, error)

	// PostStep request with any body
	PostStepWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStepResponse, error)

	PostStepWithResponse(ctx context.Context, bookId string, recipeId string, body PostStepJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStepResponse, error)

	// GetStep request
	GetStepWithResponse(ctx context.Context, bookId string, recipeId string, stepId string, reqEditors ...RequestEditorFn) (*GetStepResponse, error)

	// PutStep request with any body
	PutStepWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, stepId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStepResponse, error)

	PutStepWithResponse(ctx context.Context, bookId string, recipeId string, stepId string, body PutStepJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStepResponse, error)
}

type GetBooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BookList
}

// Status returns HTTPResponse.Status
func (r GetBooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Book
}

// Status returns HTTPResponse.Status
func (r PostBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Book
}

// Status returns HTTPResponse.Status
func (r GetBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Book
}

// Status returns HTTPResponse.Status
func (r PutBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecipeList
}

// Status returns HTTPResponse.Status
func (r GetRecipesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRecipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Recipe
}

// Status returns HTTPResponse.Status
func (r PostRecipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRecipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRecipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetRecipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRecipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Recipe
}

// Status returns HTTPResponse.Status
func (r PutRecipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRecipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIngredientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IngredientList
}

// Status returns HTTPResponse.Status
func (r GetIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Ingredient
}

// Status returns HTTPResponse.Status
func (r PostIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ingredient
}

// Status returns HTTPResponse.Status
func (r GetIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Ingredient
}

// Status returns HTTPResponse.Status
func (r PutIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStepsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StepList
}

// Status returns HTTPResponse.Status
func (r GetStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Step
}

// Status returns HTTPResponse.Status
func (r PostStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Step
}

// Status returns HTTPResponse.Status
func (r GetStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBooksWithResponse request returning *GetBooksResponse
func (c *ClientWithResponses) GetBooksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBooksResponse, error) {
	rsp, err := c.GetBooks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBooksResponse(rsp)
}

// PostBookWithBodyWithResponse request with arbitrary body returning *PostBookResponse
func (c *ClientWithResponses) PostBookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBookResponse, error) {
	rsp, err := c.PostBookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookResponse(rsp)
}

func (c *ClientWithResponses) PostBookWithResponse(ctx context.Context, body PostBookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBookResponse, error) {
	rsp, err := c.PostBook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBookResponse(rsp)
}

// DeleteBookWithResponse request returning *DeleteBookResponse
func (c *ClientWithResponses) DeleteBookWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*DeleteBookResponse, error) {
	rsp, err := c.DeleteBook(ctx, bookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBookResponse(rsp)
}

// GetBookWithResponse request returning *GetBookResponse
func (c *ClientWithResponses) GetBookWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetBookResponse, error) {
	rsp, err := c.GetBook(ctx, bookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookResponse(rsp)
}

// PutBookWithBodyWithResponse request with arbitrary body returning *PutBookResponse
func (c *ClientWithResponses) PutBookWithBodyWithResponse(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutBookResponse, error) {
	rsp, err := c.PutBookWithBody(ctx, bookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBookResponse(rsp)
}

func (c *ClientWithResponses) PutBookWithResponse(ctx context.Context, bookId string, body PutBookJSONRequestBody, reqEditors ...RequestEditorFn) (*PutBookResponse, error) {
	rsp, err := c.PutBook(ctx, bookId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutBookResponse(rsp)
}

// GetRecipesWithResponse request returning *GetRecipesResponse
func (c *ClientWithResponses) GetRecipesWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetRecipesResponse, error) {
	rsp, err := c.GetRecipes(ctx, bookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipesResponse(rsp)
}

// PostRecipeWithBodyWithResponse request with arbitrary body returning *PostRecipeResponse
func (c *ClientWithResponses) PostRecipeWithBodyWithResponse(ctx context.Context, bookId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRecipeResponse, error) {
	rsp, err := c.PostRecipeWithBody(ctx, bookId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipeResponse(rsp)
}

func (c *ClientWithResponses) PostRecipeWithResponse(ctx context.Context, bookId string, body PostRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRecipeResponse, error) {
	rsp, err := c.PostRecipe(ctx, bookId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRecipeResponse(rsp)
}

// DeleteRecipeWithResponse request returning *DeleteRecipeResponse
func (c *ClientWithResponses) DeleteRecipeWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*DeleteRecipeResponse, error) {
	rsp, err := c.DeleteRecipe(ctx, bookId, recipeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecipeResponse(rsp)
}

// GetRecipeWithResponse request returning *GetRecipeResponse
func (c *ClientWithResponses) GetRecipeWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*GetRecipeResponse, error) {
	rsp, err := c.GetRecipe(ctx, bookId, recipeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeResponse(rsp)
}

// PutRecipeWithBodyWithResponse request with arbitrary body returning *PutRecipeResponse
func (c *ClientWithResponses) PutRecipeWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRecipeResponse, error) {
	rsp, err := c.PutRecipeWithBody(ctx, bookId, recipeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRecipeResponse(rsp)
}

func (c *ClientWithResponses) PutRecipeWithResponse(ctx context.Context, bookId string, recipeId string, body PutRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRecipeResponse, error) {
	rsp, err := c.PutRecipe(ctx, bookId, recipeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRecipeResponse(rsp)
}

// GetIngredientsWithResponse request returning *GetIngredientsResponse
func (c *ClientWithResponses) GetIngredientsWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*GetIngredientsResponse, error) {
	rsp, err := c.GetIngredients(ctx, bookId, recipeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIngredientsResponse(rsp)
}

// PostIngredientWithBodyWithResponse request with arbitrary body returning *PostIngredientResponse
func (c *ClientWithResponses) PostIngredientWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostIngredientResponse, error) {
	rsp, err := c.PostIngredientWithBody(ctx, bookId, recipeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIngredientResponse(rsp)
}

func (c *ClientWithResponses) PostIngredientWithResponse(ctx context.Context, bookId string, recipeId string, body PostIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostIngredientResponse, error) {
	rsp, err := c.PostIngredient(ctx, bookId, recipeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostIngredientResponse(rsp)
}

// DeleteIngredientWithResponse request returning *DeleteIngredientResponse
func (c *ClientWithResponses) DeleteIngredientWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*DeleteIngredientResponse, error) {
	rsp, err := c.DeleteIngredient(ctx, bookId, recipeId, ingredientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIngredientResponse(rsp)
}

// GetIngredientWithResponse request returning *GetIngredientResponse
func (c *ClientWithResponses) GetIngredientWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, reqEditors ...RequestEditorFn) (*GetIngredientResponse, error) {
	rsp, err := c.GetIngredient(ctx, bookId, recipeId, ingredientId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIngredientResponse(rsp)
}

// PutIngredientWithBodyWithResponse request with arbitrary body returning *PutIngredientResponse
func (c *ClientWithResponses) PutIngredientWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutIngredientResponse, error) {
	rsp, err := c.PutIngredientWithBody(ctx, bookId, recipeId, ingredientId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIngredientResponse(rsp)
}

func (c *ClientWithResponses) PutIngredientWithResponse(ctx context.Context, bookId string, recipeId string, ingredientId string, body PutIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*PutIngredientResponse, error) {
	rsp, err := c.PutIngredient(ctx, bookId, recipeId, ingredientId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutIngredientResponse(rsp)
}

// GetStepsWithResponse request returning *GetStepsResponse
func (c *ClientWithResponses) GetStepsWithResponse(ctx context.Context, bookId string, recipeId string, reqEditors ...RequestEditorFn) (*GetStepsResponse, error) {
	rsp, err := c.GetSteps(ctx, bookId, recipeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStepsResponse(rsp)
}

// PostStepWithBodyWithResponse request with arbitrary body returning *PostStepResponse
func (c *ClientWithResponses) PostStepWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStepResponse, error) {
	rsp, err := c.PostStepWithBody(ctx, bookId, recipeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStepResponse(rsp)
}

func (c *ClientWithResponses) PostStepWithResponse(ctx context.Context, bookId string, recipeId string, body PostStepJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStepResponse, error) {
	rsp, err := c.PostStep(ctx, bookId, recipeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStepResponse(rsp)
}

// GetStepWithResponse request returning *GetStepResponse
func (c *ClientWithResponses) GetStepWithResponse(ctx context.Context, bookId string, recipeId string, stepId string, reqEditors ...RequestEditorFn) (*GetStepResponse, error) {
	rsp, err := c.GetStep(ctx, bookId, recipeId, stepId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStepResponse(rsp)
}

// PutStepWithBodyWithResponse request with arbitrary body returning *PutStepResponse
func (c *ClientWithResponses) PutStepWithBodyWithResponse(ctx context.Context, bookId string, recipeId string, stepId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutStepResponse, error) {
	rsp, err := c.PutStepWithBody(ctx, bookId, recipeId, stepId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStepResponse(rsp)
}

func (c *ClientWithResponses) PutStepWithResponse(ctx context.Context, bookId string, recipeId string, stepId string, body PutStepJSONRequestBody, reqEditors ...RequestEditorFn) (*PutStepResponse, error) {
	rsp, err := c.PutStep(ctx, bookId, recipeId, stepId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutStepResponse(rsp)
}

// ParseGetBooksResponse parses an HTTP response from a GetBooksWithResponse call
func ParseGetBooksResponse(rsp *http.Response) (*GetBooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BookList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostBookResponse parses an HTTP response from a PostBookWithResponse call
func ParsePostBookResponse(rsp *http.Response) (*PostBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Book
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteBookResponse parses an HTTP response from a DeleteBookWithResponse call
func ParseDeleteBookResponse(rsp *http.Response) (*DeleteBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBookResponse parses an HTTP response from a GetBookWithResponse call
func ParseGetBookResponse(rsp *http.Response) (*GetBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Book
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutBookResponse parses an HTTP response from a PutBookWithResponse call
func ParsePutBookResponse(rsp *http.Response) (*PutBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Book
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRecipesResponse parses an HTTP response from a GetRecipesWithResponse call
func ParseGetRecipesResponse(rsp *http.Response) (*GetRecipesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecipeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRecipeResponse parses an HTTP response from a PostRecipeWithResponse call
func ParsePostRecipeResponse(rsp *http.Response) (*PostRecipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRecipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Recipe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteRecipeResponse parses an HTTP response from a DeleteRecipeWithResponse call
func ParseDeleteRecipeResponse(rsp *http.Response) (*DeleteRecipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRecipeResponse parses an HTTP response from a GetRecipeWithResponse call
func ParseGetRecipeResponse(rsp *http.Response) (*GetRecipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutRecipeResponse parses an HTTP response from a PutRecipeWithResponse call
func ParsePutRecipeResponse(rsp *http.Response) (*PutRecipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRecipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Recipe
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetIngredientsResponse parses an HTTP response from a GetIngredientsWithResponse call
func ParseGetIngredientsResponse(rsp *http.Response) (*GetIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IngredientList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostIngredientResponse parses an HTTP response from a PostIngredientWithResponse call
func ParsePostIngredientResponse(rsp *http.Response) (*PostIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Ingredient
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteIngredientResponse parses an HTTP response from a DeleteIngredientWithResponse call
func ParseDeleteIngredientResponse(rsp *http.Response) (*DeleteIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetIngredientResponse parses an HTTP response from a GetIngredientWithResponse call
func ParseGetIngredientResponse(rsp *http.Response) (*GetIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ingredient
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutIngredientResponse parses an HTTP response from a PutIngredientWithResponse call
func ParsePutIngredientResponse(rsp *http.Response) (*PutIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Ingredient
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetStepsResponse parses an HTTP response from a GetStepsWithResponse call
func ParseGetStepsResponse(rsp *http.Response) (*GetStepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StepList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostStepResponse parses an HTTP response from a PostStepWithResponse call
func ParsePostStepResponse(rsp *http.Response) (*PostStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Step
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetStepResponse parses an HTTP response from a GetStepWithResponse call
func ParseGetStepResponse(rsp *http.Response) (*GetStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Step
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutStepResponse parses an HTTP response from a PutStepWithResponse call
func ParsePutStepResponse(rsp *http.Response) (*PutStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
